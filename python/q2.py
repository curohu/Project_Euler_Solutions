# 04/14/2022
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import datetime

target = 4000000

def fibGen(target):
    currentNum = 0
    previousNum = 0
    numList = list()

    while currentNum < target:
        if currentNum == 0:
            currentNum = 1
            previousNum = 1 # NOTE going by example this is not true fib start of 0,1,1,2 an it is instead starting at the second 1
            numList.append(currentNum)
            continue
        else:
            temp = currentNum
            currentNum = currentNum + previousNum
            previousNum = temp
            numList.append(currentNum)
    # print(currentNum) # verify it is not over 4mil (5702887)
    return numList



def sumEvens(numList):
    sum = 0
    for i in numList:
        if (i%2) == 0:
            sum += i
    return sum

startTime = datetime.datetime.now()

print(sumEvens(fibGen(target)))

print(datetime.datetime.now()-startTime)

# answer is: 4613732